package com.ts;
import com.ts.db.HibernateTemplate;

import java.io.*;
import java.util.Date;
import java.util.List;

//import javax.crypto.SecretKey;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.glassfish.jersey.media.multipart.FormDataContentDisposition;
import org.glassfish.jersey.media.multipart.FormDataParam;

import com.ts.dao.AppointmentsDao;
import com.ts.dao.AssistantDao;
import com.ts.dao.DoctorDao;
import com.ts.dao.PatientDao;
import com.ts.dao.PharmacistDao;
import com.ts.dao.ReportsDao;
import com.ts.dto.Appointments;
import com.ts.dto.Assistant;
import com.ts.dto.Doctor;
import com.ts.dto.Patient;
import com.ts.dto.Pharmacist;
import com.ts.dto.Reports;

/**
 * Root resource (exposed at "myresource" path)
 */
@Path("myresource")
public class MyResource {

	/**
	 * Method handling HTTP GET requests. The returned object will be sent to
	 * the client as "text/plain" media type.
	 *
	 * @return String that will be returned as a text/plain response.
	 */
	@GET
	@Produces(MediaType.TEXT_PLAIN)
	public String getIt() {
		return "Got it!";
	}

	@Path("getPatientByUserPass/{userName}/{password}")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Patient getPatientByUserPass(@PathParam("userName") String userName, @PathParam("password") String password) {
		System.out.println("Recieved path params: " + userName + " " + password);
		PatientDao patientDao = new PatientDao();
		Patient patient = (Patient) patientDao.getPatientByUserPass(userName, password);
		return patient;
	}
	@Path("registerPatientByGoogle")
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	public void registerPatientByGoogle(Patient patient1){
		PatientDao patientDao = new PatientDao();
		Patient patient = (Patient)patientDao.getPatientByUserName(patient1.getUserName());
		if( patient == null){
			System.out.println(patient1);
			patientDao.register(patient1);	
		}
	}

	@Path("registerPatient")
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	public int registerPatient(Patient patient) {
		System.out.println("Patient Registered!" + patient);
		//AESEncryption aesEncryption = new AESEncryption(patient.getPassword());
		//try{
		//patient.setPassword(patient.getPassword());
		//}
		//catch(Exception ex) {
			//System.out.println(ex);
		//}
		PatientDao patientDao = new PatientDao();
		return patientDao.register(patient);
	}
	@Path("registerAppointment")
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	public int registerAppointment(Appointments appointments) {
		System.out.println("Patient Registered! in Eclipse" + appointments);
		//AESEncryption aesEncryption = new AESEncryption(patient.getPassword());
		//try{
		//patient.setPassword(patient.getPassword());
		//}
		//catch(Exception ex) {
			//System.out.println(ex);
		//}
		
		AppointmentsDao appointmentsDao = new AppointmentsDao();
		return appointmentsDao.register(appointments);
	}
	
	@Path("getAllAppointments/{department}")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List<Appointments> getAllAppointments(@PathParam("department") String department) {

		AppointmentsDao appointmentsDAO = new AppointmentsDao();
		List <Appointments> appointmentList = appointmentsDAO.getAllAppointments(department);

		return appointmentList;
	}
	@Path("getAllDepartments")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List<Doctor> getAllDepartments() {

		DoctorDao doctorDao = new DoctorDao();
		List <Doctor> doctorList = doctorDao.getAllDepartments();

		return doctorList;
	}
	@Path("getUpcomingAppointments/{department}")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List<Appointments> getUpcomingAppointments(@PathParam("department") String department) {

		AppointmentsDao appointmentsDAO = new AppointmentsDao();
		List <Appointments> appointmentList = appointmentsDAO.getUpcomingAppointments(department);

		return appointmentList;
	}
	@Path("deleteAppointment/{appointmentId}")
	@DELETE
	public void deleteAppointment(@PathParam("appointmentId") int appointmentId) {
		System.out.println("Data Received in Delete : " + appointmentId);
		
		AppointmentsDao appointmentsDao = new AppointmentsDao();
		Appointments appointment = appointmentsDao.getAppointment(appointmentId);
		
		appointmentsDao.deleteAppointment(appointment);
		System.out.println("Employee record deleted successfully..!!");
	}
	
	@Path("updateAppointment")
	@PUT
	@Consumes(MediaType.APPLICATION_JSON)
	public void updateEmp(Appointments appointments) {
		System.out.println("Data Received in Update : " + appointments);
		
		AppointmentsDao appointmentsDao = new AppointmentsDao();
		appointmentsDao.updateAppointment(appointments);
		
		System.out.println("Employee record updated successfully..!!");
	}

	
	@Path("getPatientByUserName/{userName}")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Patient getPatientByUserName(@PathParam("userName") String userName) {
		System.out.println("Patient UserName!" + userName);
		
		PatientDao patientDao = new PatientDao();
		Patient patient = (Patient)patientDao.getPatientByUserName(userName);
		return patient;
	}
	@Path("getAppointmentsByUserName/{userName}")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public List <Appointments> getAppointmentsByUserName(@PathParam("userName") String userName) {
		System.out.println("Patient UserName!" + userName);
		
		AppointmentsDao appointmentsDao = new AppointmentsDao();
		List <Appointments> appointments = (List<Appointments>)appointmentsDao.getAppointmentsByUserName(userName);
		System.out.println(appointments);
		return appointments;
	}
	@Path("updatePatient")
	@PUT
	@Consumes(MediaType.APPLICATION_JSON)
	public int updatePatient(Patient patient) {
		System.out.println("Inside Update" + patient);
		PatientDao patientDao = new PatientDao();
		return patientDao.updatePatient(patient);
		//return x;
		
	}

	@Path("registerDoctor")
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	public int registerDoctor(Doctor doctor) {
		DoctorDao doctorDao = new DoctorDao();
		return doctorDao.register(doctor);
	}

	@Path("registerAssistant")
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	public int registerAssistant(Assistant assistant) {
		AssistantDao assistantDao = new AssistantDao();
		return assistantDao.register(assistant);
	}

	@Path("registerPharmacist")
	@POST
	@Produces(MediaType.APPLICATION_JSON)
	public int registerPharmacist(Pharmacist pharmacist) {
		
		PharmacistDao pharmacistDao = new PharmacistDao();
		return pharmacistDao.register(pharmacist);
	}

	@Path("getDoctorByUserPass/{loginId}/{password}")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Object getDoctorByUserPass(@PathParam("loginId") String loginId, @PathParam("password") String password) {
		System.out.println("Recieved path params: " + loginId + " " + password);
		DoctorDao doctorDao = new DoctorDao();
		Doctor doctor = (Doctor) doctorDao.getDoctorByUserPass(loginId, password);
		return doctor;
	}

	@Path("getPharmacistByUserPass/{loginId}/{password}")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Object getPharmacistByUserPass(@PathParam("loginId") String loginId,
			@PathParam("password") String password) {
		System.out.println("Recieved path params: " + loginId + " " + password);
		PharmacistDao pharmacistDao = new PharmacistDao();
		Pharmacist pharmacist = (Pharmacist) pharmacistDao.getPharmacistByUserPass(loginId, password);
		return pharmacist;
	}

	@Path("getAssistantByUserPass/{loginId}/{password}")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Object getAssistantByUserPass(@PathParam("loginId") String loginId, @PathParam("password") String password) {
		System.out.println("Recieved path params: " + loginId + " " + password);
		AssistantDao AssistantDao = new AssistantDao();
		Assistant assistant = (Assistant) AssistantDao.getAssistantByUserPass(loginId, password);
		return assistant;
	}
	@Path("getAssistantByUserName/{userName}")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Object getAssistantByUserName(@PathParam("userName") String userName) {
		System.out.println("Assistant UserName!" + userName);
		AssistantDao assistantDao = new AssistantDao();
		Assistant assistant = (Assistant)assistantDao.getAssistantByUserName(userName);
		return assistant;
	}
	@Path("uploadImage")
	@POST
	@Consumes(MediaType.MULTIPART_FORM_DATA)
	public void uploadImage(@FormDataParam("report") InputStream fileInputStream,@FormDataParam("report") FormDataContentDisposition
	formDataContentDisposition, @FormDataParam("userName") String userName, @FormDataParam("date") java.sql.Date date) throws IOException {
	System.out.println("Inside Upload");
		int read = 0;
		byte[] bytes = new byte[1024];
		
		String path = this.getClass().getClassLoader().getResource("").getPath();
		System.out.println(path);
		
		String pathArr[] = path.split("/WEB-INF/classes/");
		
		FileOutputStream out = new FileOutputStream(new File(pathArr[0]+"/image/", formDataContentDisposition.getFileName()));
				
				
		while((read = fileInputStream.read(bytes)) != -1){	
			
			out.write(bytes,0,read);
		}
		out.flush();
		out.close();
		
		Reports reports = new Reports();
		reports.setUserName(userName);
		reports.setDate(date);
		reports.setReport(formDataContentDisposition.getFileName());
		ReportsDao reportDao = new ReportsDao();
		reportDao.addReport(reports);
	}
	@Path("updateAssistant")
	@PUT
	@Consumes(MediaType.APPLICATION_JSON)
	public int updateAssistant(Assistant assistant) {
		System.out.println("Inside Update" + assistant);
		AssistantDao assistantDao = new AssistantDao();
		return assistantDao.updateAssistant(assistant);
		//return x;
		
	}
	@Path("getDoctorByUserName/{userName}")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Object getDoctorByUserName(@PathParam("userName") String userName) {
		System.out.println("Doctor UserName!" + userName);
		DoctorDao doctorDao = new DoctorDao();
		Doctor doctor = (Doctor)DoctorDao.getDoctorByUserName(userName);
		return doctor;
	}
	@Path("updateDoctor")
	@PUT
	@Consumes(MediaType.APPLICATION_JSON)
	public int updateDoctor(Doctor doctor) {
		System.out.println("Inside Update" + doctor);
		DoctorDao doctorDao = new DoctorDao();
		return doctorDao.updateDoctor(doctor);
		//return x;
		
	}
	@Path("getPharmacistByUserName/{userName}")
	@GET
	@Produces(MediaType.APPLICATION_JSON)
	public Object getPharmacistByUserName(@PathParam("userName") String userName) {
		System.out.println("Pharmacist UserName!" + userName);
		PharmacistDao pharmacistDao = new PharmacistDao();
		Pharmacist pharmacist = (Pharmacist)pharmacistDao.getPharmacistByUserName(userName);
		return pharmacist;
	}
	@Path("updatePharmacist")
	@PUT
	@Consumes(MediaType.APPLICATION_JSON)
	public int updatePharmacist(Pharmacist pharmacist) {
		System.out.println("Inside Update" + pharmacist);
		PharmacistDao pharmacistDao = new PharmacistDao();
		return PharmacistDao.updatePharmacist(pharmacist);
		//return x;
		
	}

}
